#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(binding = 0) uniform Constants
{
	int   StepSize;
	float KernelSigma;
	float DepthSigma;
};
layout(binding = 1, r8) uniform image2D FilteredAO;
layout(binding = 2) uniform sampler2D AO;
layout(binding = 3) uniform sampler2D LinearDepth;

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main()
{
	ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(FilteredAO);
	if (any(greaterThanEqual(coord, size)))
	{
	    return;
	}

	vec2 center_depth_gradient = texelFetch(LinearDepth, coord, 0).rg;
	float center_depth = center_depth_gradient.r;
	float center_gradient = center_depth_gradient.g;

	float phi_depth = center_gradient * DepthSigma + 1e-4;
	float inv_phi_depth = 1.0 / phi_depth;

	float ao_sum = 0.0;
	float weight_sum = 0.0;

	const int radius = 1;
	float kernel_weights[radius + 1];
	for (int i = 0; i < (radius + 1); ++i)
	{
		kernel_weights[i] = exp(-float(i * i) / (2.0 * KernelSigma * KernelSigma));
	}

	for (int y = -radius; y <= radius; ++y)
	{
		for (int x = -radius; x <= radius; ++x)
		{
			ivec2 sample_coord = coord + ivec2(x, y) * StepSize;
			if (all(greaterThanEqual(sample_coord, ivec2(0, 0))) && all(lessThan(sample_coord, size)))
			{
				float ao = texelFetch(AO, sample_coord, 0).r;
				float depth = texelFetch(LinearDepth, sample_coord, 0).r;

				float kernel_weight = kernel_weights[abs(x)] * kernel_weights[abs(y)];
				float depth_weight = exp(-(abs(depth - center_depth) * inv_phi_depth));
				float weight = depth_weight * kernel_weight;

				ao_sum += ao * weight;
				weight_sum += weight;
			}
		}
	}

	float ao = ao_sum / weight_sum;
	imageStore(FilteredAO, ivec2(gl_GlobalInvocationID.xy), vec4(ao, 0.0, 0.0, 0.0));
}