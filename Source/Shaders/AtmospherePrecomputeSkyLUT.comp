#version 450
#extension GL_GOOGLE_include_directive : require

#include "AtmosphereCommon.glsl"

layout(binding = 0, rgba16f) uniform image2D SkyLUTR;
layout(binding = 1, rgba16f) uniform image2D SkyLUTM;

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main()
{
	ivec2 size = imageSize(SkyLUTR);
	if (any(greaterThanEqual(gl_GlobalInvocationID.xy, size)))
	{
	    return;
	}
	
	vec2 tex_coord = vec2(gl_GlobalInvocationID.xy) / vec2(size);
	
	// Calculate view direction
	float view_angle = TexCoordToViewAngle(tex_coord.x);
	vec3 view_dir = normalize(vec3(sqrt(clamp(1.0 - view_angle * view_angle, 0.0, 1.0)), view_angle, 0.0));

	// Calculate light direction
	float light_angle = TexCoordToLightAngle(tex_coord.y);
	vec3 light_dir = normalize(vec3(sqrt(clamp(1.0 - light_angle * light_angle, 0.0, 1.0)), light_angle, 0.0));

	// Create ray
	vec3 ray_orig = vec3(0.0, PLANET_RADIUS + HEIGHT_ABOVE_GROUND, 0.0);
	vec3 ray_dir = view_dir;
	
	// Test intersection ray vs planet
	vec2 intersection = RaySphereIntersection(ray_orig, ray_dir, PLANET_RADIUS);
	float ray_len = intersection.y > 0.0 ? intersection.x : LARGE_VALUE;
	
	// Test intersection ray vs atmosphere
	intersection = RaySphereIntersection(ray_orig, ray_dir, ATMOSPHERE_RADIUS);
	ray_len = min(ray_len, intersection.y);

	const int step_count = 64;
	float step_len = ray_len / float(step_count);

	vec2 density_orig_to_point = vec2(0.0, 0.0);
	vec3 scatter_r = vec3(0.0, 0.0, 0.0);
	vec3 scatter_m = vec3(0.0, 0.0, 0.0);
	
	// Step in the ray direction
	for (int i = 0; i < step_count; ++i)
	{
		vec3 point_on_ray = ray_orig + ray_dir * ((float(i) + 0.5) * step_len);
		
		// Calculate local density
		vec2 density = LocalDensity(point_on_ray) * step_len;
		density_orig_to_point += density;

		// Calculate density from point to atmosphere
		vec2 density_point_to_atmosphere = DensityToAtmosphere(point_on_ray, light_dir);

		// Calculate scattering contribution
		vec2 density_orig_to_atmosphere = density_orig_to_point + density_point_to_atmosphere;
		vec3 extinction = Extinction(density_orig_to_atmosphere);
		scatter_r += density.x * extinction;
		scatter_m += density.y * extinction;
	}
	
	imageStore(SkyLUTR, ivec2(gl_GlobalInvocationID.xy), vec4(scatter_r, 0.0));
	imageStore(SkyLUTM, ivec2(gl_GlobalInvocationID.xy), vec4(scatter_m, 0.0));
}