#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(binding = 0) uniform Constants
{
	bool	IsHistValid;
	float	Exposure;
};
layout(binding = 1, rgba16f) uniform image2D OutTemporal;
layout(binding = 2) uniform sampler2D Color;
layout(binding = 3) uniform sampler2D Depth;
layout(binding = 4) uniform sampler2D Motion;
layout(binding = 5) uniform sampler2D Temporal;

float LuminanceWeight(vec3 c)
{
	return 1.0 / (1.0 + dot(c, vec3(0.2126, 0.7152, 0.0722)) * Exposure);
}

float Min4(vec4 v)
{
	return min(min(v.x, v.y), min(v.z, v.w));
}

// http://vec3.ca/bicubic-filtering-in-fewer-taps/
vec3 BicubicFilter(sampler2D tex, vec2 uv, ivec2 size)
{
	vec2 pos = uv * vec2(size);

	vec2 tc = floor(pos - 0.5) + 0.5;
	vec2 f = pos - tc;
	vec2 f2 = f * f;
	vec2 f3 = f * f2;

	vec2 w0 = f2 - 0.5 * (f3 + f);
	vec2 w1 = 1.5 * f3 - 2.5 * f2 + 1;
	vec2 w3 = 0.5 * (f3 - f2);
	vec2 w2 = 1.0 - w0 - w1 - w3;
	vec2 w12 = w1 + w2;

	vec2 inv_size = vec2(1.0) / vec2(size);

	vec2 t0 = (tc - 1.0) * inv_size;
	vec2 t1 = (tc + w2 / w12) * inv_size;
	vec2 t2 = (tc + 2.0) * inv_size;

	vec4 samples =
		vec4(texture(tex, vec2(t1.x, t0.y)).rgb, 1.0) * (w12.x *  w0.y) +
		vec4(texture(tex, vec2(t0.x, t1.y)).rgb, 1.0) * ( w0.x * w12.y) +
		vec4(texture(tex, vec2(t1.x, t1.y)).rgb, 1.0) * (w12.x * w12.y) +
		vec4(texture(tex, vec2(t2.x, t1.y)).rgb, 1.0) * ( w3.x * w12.y) +
		vec4(texture(tex, vec2(t1.x, t2.y)).rgb, 1.0) * (w12.x *  w3.y);
	return samples.rgb / samples.a;
}

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main()
{
	ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(OutTemporal);
	if (any(greaterThanEqual(coord, size)))
	{
	    return;
	}

	vec3 temporal_color;
	float temporal_weight;
	if (IsHistValid)
	{
		//   a
		// b c d
		//   e
		float da = texelFetch(Depth, coord + ivec2( 0, -1), 0).r;
		float db = texelFetch(Depth, coord + ivec2(-1,  0), 0).r;
		float dc = texelFetch(Depth, coord + ivec2( 0,  0), 0).r;
		float dd = texelFetch(Depth, coord + ivec2( 1,  0), 0).r;
		float de = texelFetch(Depth, coord + ivec2( 0,  1), 0).r;

		float closest_depth = da;
		ivec2 closest_offset = ivec2(0, -1);
		if (db > closest_depth) { closest_depth = db; closest_offset = ivec2(-1, 0); }
		if (dc > closest_depth) { closest_depth = dc; closest_offset = ivec2( 0, 0); }
		if (dd > closest_depth) { closest_depth = dd; closest_offset = ivec2( 1, 0); }
		if (de > closest_depth) { closest_depth = de; closest_offset = ivec2( 0, 1); }

		vec3 motion = texelFetch(Motion, coord + closest_offset, 0).xyz;

		vec2 prev_tex_coord = ((vec2(gl_GlobalInvocationID.xy) + 0.5) / vec2(size)) + motion.xy;
		temporal_color = BicubicFilter(Temporal, prev_tex_coord, size).rgb;
		temporal_weight = Min4(textureGather(Temporal, prev_tex_coord, 3));

		float velocity_weight_xy = clamp(1.0 - length(motion.xy * vec2(size)) * (1.0 / 128.0), 0.0, 1.0);
		float velocity_weight_z = clamp(1.0 - motion.z * 64.0, 0.0, 1.0);
		temporal_weight *= (velocity_weight_xy * velocity_weight_z);
		
		// a b c
		// d e f
		// g h i
		vec3 ca = texelFetch(Color, coord + ivec2(-1, -1), 0).rgb;
		vec3 cb = texelFetch(Color, coord + ivec2( 0, -1), 0).rgb;
		vec3 cc = texelFetch(Color, coord + ivec2( 1, -1), 0).rgb;
		vec3 cd = texelFetch(Color, coord + ivec2(-1,  0), 0).rgb;
		vec3 ce = texelFetch(Color, coord + ivec2( 0,  0), 0).rgb;
		vec3 cf = texelFetch(Color, coord + ivec2( 1,  0), 0).rgb;
		vec3 cg = texelFetch(Color, coord + ivec2(-1,  1), 0).rgb;
		vec3 ch = texelFetch(Color, coord + ivec2( 0,  1), 0).rgb;
		vec3 ci = texelFetch(Color, coord + ivec2( 1,  1), 0).rgb;

		// Clip temporal color
		vec3 m1 = (ca + cb + cc + cd + ce + cf + cg + ch + ci) / 9.0;
		vec3 m2 = (ca * ca + cb * cb + cc * cc + cd * cd + ce * ce + cf * cf + cg * cg + ch * ch + ci * ci) / 9.0;
		vec3 extent = sqrt(max(vec3(0.0), m2 - m1 * m1)) * mix(1.0, 4.0, clamp(temporal_weight * temporal_weight, 0.0, 1.0));
		vec3 displacement = temporal_color - m1;
		vec3 units = abs(displacement / extent);
		float max_unit = max(max(units.x, units.y), max(units.z, 1.0));
		temporal_color = m1 + displacement / max_unit;

		// Blend current and temporal color
		float blend_amount = min(temporal_weight, 0.96);
		float w0 = LuminanceWeight(ce) * (1.0 - blend_amount);
		float w1 = LuminanceWeight(temporal_color) * blend_amount;
		temporal_color = (ce * w0 + temporal_color * w1) / (w0 + w1);
	}
	else
	{
		temporal_color = texelFetch(Color, coord, 0).rgb;
		temporal_weight = 0.0;
	}

	temporal_weight = 1.0 / (2.0 - temporal_weight);

	imageStore(OutTemporal, ivec2(gl_GlobalInvocationID.xy), vec4(temporal_color, temporal_weight));
}