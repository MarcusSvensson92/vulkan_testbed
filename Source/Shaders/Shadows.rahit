#version 460
#extension GL_NV_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require

hitAttributeNV vec2 BarycentricCoord;

struct TransparentInstance
{
	uint MeshIndex;
	uint TextureIndex;
	uint IndexOffset;
	uint VertexOffset;
};
layout(set = 1, binding = 0) readonly buffer TransparentInstanceBuffer { TransparentInstance TransparentInstances[]; };
layout(set = 1, binding = 1) readonly buffer IndexBuffer { uint16_t Indices[]; } IndexBuffers[];
layout(set = 1, binding = 2) readonly buffer VertexBuffer { vec2 TexCoords[]; } VertexBuffers[];
layout(set = 1, binding = 3) uniform sampler2D BaseColorTextures[];

void main()
{
	TransparentInstance instance = TransparentInstances[gl_InstanceCustomIndexNV];

	uint index_offset = instance.IndexOffset + gl_PrimitiveID * 3;
	uint vertex_offset = instance.VertexOffset;
	
	uint index_0 = uint(IndexBuffers[instance.MeshIndex].Indices[index_offset + 0]);
	uint index_1 = uint(IndexBuffers[instance.MeshIndex].Indices[index_offset + 1]);
	uint index_2 = uint(IndexBuffers[instance.MeshIndex].Indices[index_offset + 2]);
	
	vec2 tex_coord_0 = VertexBuffers[instance.MeshIndex].TexCoords[vertex_offset + index_0];
	vec2 tex_coord_1 = VertexBuffers[instance.MeshIndex].TexCoords[vertex_offset + index_1];
	vec2 tex_coord_2 = VertexBuffers[instance.MeshIndex].TexCoords[vertex_offset + index_2];
	
	vec2 tex_coord =
		tex_coord_0 * (1.0 - BarycentricCoord.x - BarycentricCoord.y) +
		tex_coord_1 * BarycentricCoord.x +
		tex_coord_2 * BarycentricCoord.y;
	
	// TODO: Proper mip level calculation
	float alpha = textureLod(BaseColorTextures[instance.TextureIndex], tex_coord, 0.0).a;
	if (alpha < 0.5)
		ignoreIntersectionNV();
	else
		terminateRayNV();
}
