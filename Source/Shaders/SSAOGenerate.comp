#version 450
#extension GL_ARB_separate_shader_objects : enable

#define PI				3.14159265

#define NUM_DIRECTIONS	2
#define NUM_STEPS		2

layout(binding = 0) uniform Constants
{
	mat4	InvProj;
	mat4	View;
	float	ScreenRadius;
	float	NegInvRadius;
	float	Bias;
	float	Multiplier;
	float	Intensity;
};
layout(binding = 1, r8) uniform image2D OutAO;
layout(binding = 2) uniform sampler2D Depth;
layout(binding = 3) uniform sampler2D Normal;
layout(binding = 4) uniform sampler2D BlueNoise;

vec3 GetViewPos(ivec2 coord, ivec2 size)
{
	float depth = texelFetch(Depth, clamp(coord, ivec2(0, 0), size - 1), 0).r;
	float one_over_w = 1.0 / (InvProj[2][3] * depth + InvProj[3][3]);

	vec2 tex_coord = (vec2(coord) + 0.5) / vec2(size);

	vec3 view_pos;
	view_pos.x = InvProj[0][0] * one_over_w * (tex_coord.x * 2.0 - 1.0);
	view_pos.y = InvProj[1][1] * one_over_w * (tex_coord.y * 2.0 - 1.0);
	view_pos.z = InvProj[3][2] * one_over_w;
	return view_pos;
}

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main()
{
	ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(OutAO);
	if (any(greaterThanEqual(coord, size)))
	{
	    return;
	}

	vec3 view_pos = GetViewPos(coord, size);

	vec3 world_normal = normalize(texelFetch(Normal, coord, 0).rgb * 2.0 - 1.0);
	vec3 view_normal = normalize(mat3(View) * world_normal);

	vec2 rand = texelFetch(BlueNoise, (coord & 127), 0).rg;

	float radius = ScreenRadius / view_pos.z;
	float step_size = radius / float(NUM_STEPS + 1);

	float ao = 0.0;
	for (uint dir_index = 0; dir_index < NUM_DIRECTIONS; ++dir_index)
	{
		float angle = (float(dir_index) + rand.x) * (2.0 * PI / NUM_DIRECTIONS);
		vec2 dir = vec2(sin(angle), -cos(angle));

		for (uint step_index = 0; step_index < NUM_STEPS; ++step_index)
		{
			ivec2 step_coord = coord + ivec2(round(dir * ((float(step_index) + rand.y) * step_size + 1.0)));
			vec3 step_view_pos = GetViewPos(step_coord, size);

			vec3 view_ray = step_view_pos - view_pos;
			float view_ray_len = length(view_ray);

			float n_dot_r = dot(view_normal, view_ray) / view_ray_len;
			float ao_normal_factor = clamp(n_dot_r - Bias, 0.0, 1.0);

			float ao_dist_factor = clamp(view_ray_len * NegInvRadius + 1.0, 0.0, 1.0);

			ao += ao_normal_factor * ao_dist_factor;
		}
	}
	ao *= Multiplier / (NUM_DIRECTIONS * NUM_STEPS);
	ao = clamp(1.0 - ao * 2.0, 0.0, 1.0);
	ao = pow(ao, Intensity);
	imageStore(OutAO, coord, vec4(ao, 0.0, 0.0, 0.0));
}